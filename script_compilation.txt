Script Compilation created on Sat Jul 12 01:09:36 PM EDT 2025
Source directory: /mnt/Projects/GitHub/scriptcompile
=================================================================

-----------------------------------------------------------------
FILE:   install-scriptcompile.sh
PATH:   /mnt/Projects/GitHub/scriptcompile
SIZE:   435 bytes
LAST MODIFIED: 2025-07-12 09:32:07.934704090 -0400
-----------------------------------------------------------------

#!/bin/bash
# This script installs scriptcompile.sh as a global command 'scriptcompile'
# Usage: sudo ./install-scriptcompile.sh

set -e

SCRIPT_SOURCE="$(dirname "$0")/scriptcompile.sh"
INSTALL_PATH="/usr/local/bin/scriptcompile"

# Copy and rename
sudo cp "$SCRIPT_SOURCE" "$INSTALL_PATH"
sudo chmod +x "$INSTALL_PATH"

echo "'scriptcompile' command installed to $INSTALL_PATH."
echo "You can now use 'scriptcompile' from anywhere."


-----------------------------------------------------------------
FILE:   scriptcompile.sh
PATH:   /mnt/Projects/GitHub/scriptcompile
SIZE:   4047 bytes
LAST MODIFIED: 2025-07-12 13:04:41.442777912 -0400
-----------------------------------------------------------------

#!/bin/bash
# ScriptCompile Command - Linux (Bash) Version
# Scans a directory for various script/code files and compiles their metadata and contents into a single output file.

# Default values
default_output_file="script_compilation.txt"
default_start_dir="$(pwd)"

# Handle arguments
START_DIR="${1:-$default_start_dir}"
OUTPUT_FILE="${2:-$START_DIR/$default_output_file}"

# Ensure output file is absolute path if possible
if command -v readlink &>/dev/null; then
    OUTPUT_FILE="$(readlink -f "$OUTPUT_FILE")"
fi

# Count total files processed
total_files=0

# Create or truncate the output file with header
echo "Script Compilation created on $(date)" > "$OUTPUT_FILE"
echo "Source directory: $START_DIR" >> "$OUTPUT_FILE"
echo "=================================================================" >> "$OUTPUT_FILE"
echo >> "$OUTPUT_FILE"

# Function to process a single file
process_file() {
    local file="$1"
    
    # Skip processing the output file itself
    if [[ "$file" == "$OUTPUT_FILE" ]]; then
        return
    fi
    
    # Increment counter
    total_files=$((total_files + 1))
    
    # Display processing message
    echo "Processing: $file"
    
    # Append file info and content to output file
    echo "-----------------------------------------------------------------" >> "$OUTPUT_FILE"
    echo "FILE:   $(basename "$file")" >> "$OUTPUT_FILE"
    echo "PATH:   $(dirname "$file")" >> "$OUTPUT_FILE"
    echo "SIZE:   $(stat -c %s "$file" 2>/dev/null || wc -c < "$file") bytes" >> "$OUTPUT_FILE"
    echo "LAST MODIFIED: $(stat -c %y "$file" 2>/dev/null || date -r "$file" '+%Y-%m-%d %H:%M:%S.%N')" >> "$OUTPUT_FILE"
    echo "-----------------------------------------------------------------" >> "$OUTPUT_FILE"
    echo >> "$OUTPUT_FILE"
    cat "$file" >> "$OUTPUT_FILE" 2>/dev/null
    echo >> "$OUTPUT_FILE"
    echo >> "$OUTPUT_FILE"
}

# Process each file type separately for maximum compatibility
echo "Searching for script and code files..."

# Python files
find "$START_DIR" -type f -name "*.py" -print0 2>/dev/null | while IFS= read -r -d '' file; do
    process_file "$file"
done

# JavaScript files
find "$START_DIR" -type f -name "*.js" -print0 2>/dev/null | while IFS= read -r -d '' file; do
    process_file "$file"
done

# Shell script files
find "$START_DIR" -type f -name "*.sh" -print0 2>/dev/null | while IFS= read -r -d '' file; do
    process_file "$file"
done

# TypeScript files (including .tsx)
find "$START_DIR" -type f \( -name "*.ts" -o -name "*.tsx" \) -print0 2>/dev/null | while IFS= read -r -d '' file; do
    process_file "$file"
done

# JSX files
find "$START_DIR" -type f -name "*.jsx" -print0 2>/dev/null | while IFS= read -r -d '' file; do
    process_file "$file"
done

# C/C++ files
find "$START_DIR" -type f \( -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) -print0 2>/dev/null | while IFS= read -r -d '' file; do
    process_file "$file"
done

# Other script types
find "$START_DIR" -type f \( -name "*.pl" -o -name "*.php" -o -name "*.rb" -o -name "*.sql" \
                            -o -name "*.cs" -o -name "*.java" -o -name "*.cmd" -o -name "*.bat" \
                            -o -name "*.ps1" -o -name "*.vbs" \) -print0 2>/dev/null | \
    while IFS= read -r -d '' file; do
        process_file "$file"
    done

# Write footer with stats
echo >> "$OUTPUT_FILE"
echo "Compilation complete!" >> "$OUTPUT_FILE"
echo "$total_files files have been compiled into:" >> "$OUTPUT_FILE"
echo "$OUTPUT_FILE" >> "$OUTPUT_FILE"

# Show completion message
if [ $total_files -eq 0 ]; then
    echo "No matching files found in $START_DIR"
else
    echo "Compilation complete! $total_files files processed."
    echo "Output saved to: $OUTPUT_FILE"
fi

# Check for help argument
if [ "$1" = "--help" ]; then
    echo "Usage: scriptcompile [directory] [output_file]"
    echo "  - directory:   Source directory to scan (default: current directory)"
    echo "  - output_file: Output file (default: script_compilation.txt in source directory)"
    exit 0
fi

exit 0


-----------------------------------------------------------------
FILE:   scriptcompile.bat
PATH:   /mnt/Projects/GitHub/scriptcompile
SIZE:   8811 bytes
LAST MODIFIED: 2025-05-21 16:20:32.126921000 -0400
-----------------------------------------------------------------

@echo off
setlocal enabledelayedexpansion

echo ===================================================
echo ScriptCompile Command - Standalone Version
echo ===================================================
echo.

:: Check for admin rights
net session >nul 2>&1
if %errorlevel% neq 0 (
    echo This script requires administrator privileges.
    echo Please right-click and select "Run as administrator".
    echo.
    pause
    exit /b
)

:: Create the Scripts directory in user profile
set "SCRIPT_DIR=%USERPROFILE%\Scripts"
if not exist "%SCRIPT_DIR%" (
    echo Creating Scripts directory...
    mkdir "%SCRIPT_DIR%"
)

:: Create the scriptcompile.bat file as a completely standalone solution
set "SCRIPT_PATH=%SCRIPT_DIR%\scriptcompile.bat"
echo Creating scriptcompile command...

(
echo @echo off
echo setlocal enabledelayedexpansion
echo.
echo :: Set variables
echo set "OUTPUT_FILE=%%CD%%\script_compilation.txt"
echo set "START_DIR=%%CD%%"
echo.
echo :: Allow user to specify a different directory
echo if not "%%~1"=="" ^(
echo     set "START_DIR=%%~1"
echo     set "OUTPUT_FILE=%%START_DIR%%\script_compilation.txt"
echo ^)
echo.
echo :: Ensure directory path ends with a backslash
echo if not "%%START_DIR:~-1%%"=="\" set "START_DIR=%%START_DIR%%\"
echo.
echo :: Allow user to specify output file
echo if not "%%~2"=="" ^(
echo     set "OUTPUT_FILE=%%~2"
echo ^)
echo.
echo :: Create the output file with a header
echo echo Script Compilation created on %%date%% at %%time%% ^> "%%OUTPUT_FILE%%"
echo echo Source directory: %%START_DIR%% ^>^> "%%OUTPUT_FILE%%"
echo echo ================================================================= ^>^> "%%OUTPUT_FILE%%"
echo echo. ^>^> "%%OUTPUT_FILE%%"
echo.
echo :: Initialize file counter
echo set "FileCount=0"
echo set "TotalFiles=0"
echo.
echo echo Script Compilation Tool
echo echo ======================
echo echo.
echo echo Scanning directory: %%START_DIR%%
echo echo Output will be saved to: %%OUTPUT_FILE%%
echo echo.
echo.
echo :: Process Python files
echo echo Searching for .py files...
echo.
echo for /r "%%START_DIR%%" %%%%F in ^(*.py^) do ^(
echo     if exist "%%%%F" ^(
echo         set /a FileCount+=1
echo         set /a TotalFiles+=1
echo         echo [!FileCount!] Processing: %%%%F
echo.
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo FILE: %%%%~nxF ^>^> "%%OUTPUT_FILE%%"
echo         echo PATH: %%%%~dpF ^>^> "%%OUTPUT_FILE%%"
echo         echo SIZE: %%%%~zF bytes ^>^> "%%OUTPUT_FILE%%"
echo         echo LAST MODIFIED: %%%%~tF ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         type "%%%%F" ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo     ^)
echo ^)
echo.
echo :: Process JavaScript files
echo echo Searching for .js files...
echo set "FileCount=0"
echo.
echo for /r "%%START_DIR%%" %%%%F in ^(*.js^) do ^(
echo     if exist "%%%%F" ^(
echo         set /a FileCount+=1
echo         set /a TotalFiles+=1
echo         echo [!FileCount!] Processing: %%%%F
echo.
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo FILE: %%%%~nxF ^>^> "%%OUTPUT_FILE%%"
echo         echo PATH: %%%%~dpF ^>^> "%%OUTPUT_FILE%%"
echo         echo SIZE: %%%%~zF bytes ^>^> "%%OUTPUT_FILE%%"
echo         echo LAST MODIFIED: %%%%~tF ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         type "%%%%F" ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo     ^)
echo ^)
echo.
echo :: Process batch files
echo echo Searching for .bat and .cmd files...
echo set "FileCount=0"
echo.
echo for /r "%%START_DIR%%" %%%%F in ^(*.bat *.cmd^) do ^(
echo     if exist "%%%%F" ^(
echo         set /a FileCount+=1
echo         set /a TotalFiles+=1
echo         echo [!FileCount!] Processing: %%%%F
echo.
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo FILE: %%%%~nxF ^>^> "%%OUTPUT_FILE%%"
echo         echo PATH: %%%%~dpF ^>^> "%%OUTPUT_FILE%%"
echo         echo SIZE: %%%%~zF bytes ^>^> "%%OUTPUT_FILE%%"
echo         echo LAST MODIFIED: %%%%~tF ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         type "%%%%F" ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo     ^)
echo ^)
echo.
echo :: Process C/C++ files
echo echo Searching for .c, .cpp, .h and .hpp files...
echo set "FileCount=0"
echo.
echo for /r "%%START_DIR%%" %%%%F in ^(*.c *.cpp *.h *.hpp^) do ^(
echo     if exist "%%%%F" ^(
echo         set /a FileCount+=1
echo         set /a TotalFiles+=1
echo         echo [!FileCount!] Processing: %%%%F
echo.
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo FILE: %%%%~nxF ^>^> "%%OUTPUT_FILE%%"
echo         echo PATH: %%%%~dpF ^>^> "%%OUTPUT_FILE%%"
echo         echo SIZE: %%%%~zF bytes ^>^> "%%OUTPUT_FILE%%"
echo         echo LAST MODIFIED: %%%%~tF ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         type "%%%%F" ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo     ^)
echo ^)
echo.
echo :: Process other script files
echo echo Searching for other script file types...
echo set "FileCount=0"
echo.
echo for /r "%%START_DIR%%" %%%%F in ^(*.ps1 *.vbs *.sh *.pl *.php *.rb *.sql *.cs *.java *.tsx *.jsx *.ts^) do ^(
echo     if exist "%%%%F" ^(
echo         set /a FileCount+=1
echo         set /a TotalFiles+=1
echo         echo [!FileCount!] Processing: %%%%F
echo.
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo FILE: %%%%~nxF ^>^> "%%OUTPUT_FILE%%"
echo         echo PATH: %%%%~dpF ^>^> "%%OUTPUT_FILE%%"
echo         echo SIZE: %%%%~zF bytes ^>^> "%%OUTPUT_FILE%%"
echo         echo LAST MODIFIED: %%%%~tF ^>^> "%%OUTPUT_FILE%%"
echo         echo ----------------------------------------------------------------- ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         type "%%%%F" ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo         echo. ^>^> "%%OUTPUT_FILE%%"
echo     ^)
echo ^)
echo.
echo echo.
echo echo Compilation complete!
echo echo !TotalFiles! files have been compiled into:
echo echo %%OUTPUT_FILE%%
) > "%SCRIPT_PATH%"

:: Add the Scripts directory to PATH if not already there
echo Checking PATH environment variable...
set "PATH_UPDATED=0"

:: Get current user PATH
for /f "tokens=2*" %%A in ('reg query HKCU\Environment /v PATH 2^>nul ^| find "PATH"') do set "USER_PATH=%%B"

:: Check if Scripts directory is already in PATH
if defined USER_PATH (
    echo %USER_PATH% | findstr /C:"%SCRIPT_DIR%" >nul
    if errorlevel 1 (
        :: Not found in user PATH, add it
        setx PATH "%USER_PATH%;%SCRIPT_DIR%"
        set "PATH_UPDATED=1"
    ) else (
        echo Scripts directory already in PATH.
    )
) else (
    :: No user PATH exists, create it
    setx PATH "%SCRIPT_DIR%"
    set "PATH_UPDATED=1"
)

echo.
echo ===================================================
echo Installation Complete!
echo ===================================================
echo.
echo The scriptcompile command has been installed!
echo.

if "%PATH_UPDATED%"=="1" (
    echo Your PATH has been updated. You need to restart any open 
    echo command prompts for the changes to take effect.
    echo.
)

echo Usage examples:
echo.
echo   scriptcompile                 - Compile scripts from current directory
echo   scriptcompile C:\path         - Compile scripts from specified directory
echo   scriptcompile C:\path output.txt - Specify output filename
echo.
echo Press any key to exit...
pause > nul


Compilation complete!
0 files have been compiled into:
/mnt/Projects/GitHub/scriptcompile/script_compilation.txt
